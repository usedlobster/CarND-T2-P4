Reflection

    Describe the effect each of the P, I, D components had in your implementation.

    P - The "Proportional" part makes the car steer in proportion to the cross track error (CTE). The proportional factor Kp is mulitplied by the CTE to calculate the steering angle. This results in the car overshooting the reference trajectory, then changing course and oscillating. Increasing Kp will make the the vehicle to oscillate faster. I settled on a proportional factor of 1.0 for the PID controller.

    I - The "Integral" part corrects systemic bias such as steerin
g drift. The integral factor Ki is multiplied by sum of all the previous CTE. The steering drift is not an issue in the simulation, so Ki was set to 0. I tried some non-zero values of Ki, and they would make the vehicle oscillate and even drive off the track.

    D - The "Differential" part makes the steering angle to dec
rease as it reaches the reference trajectory. This allows the car to approach the trajectory "gracefully" rather than osclillating wildly. It is calculated by multiplying the differential factor Kd by the derivative of CTE. This is equal to CTE at timestep t - CTE at timestep t-1 divided by delta t. The larger Kd will make the steering angle decrease faster as it reaches the reference trajectory. The Kd value I used was 20.0.

    Describe how the final hyperparameters were chosen.

The parameters are chosen through manual tuning. I first tried a set of small value parameters which were introduced in the Udacity lesson. However, the car drove off the track. I realized that the steering drifting is not a issue in the simulator. Therefore, I set Ki to be 0. And then I started to increase Kp and Kd. At first I increase them with small rate, 0.1 increament in each step. But it does not helps much. Then I tried to increase the Kd with larger rate, 5 increament in each step. After Kd increases to larger than 10 the car tends to drive on the track. After that I started to tuning the parameter Kp.

The final parameters I am using are

Kp = 1.0, Ki = 0, Kd = 20.0. 

-------------


A video of the simulated car driving around the track can be found here.
Components of PID

The actual implementation of code for a basic PID controller is fairly straightforward, but making the controller actually perform well is the tough part. Having knowledge of each part of "PID" is important:

    The "P" for proportional means that the car will steer in proportion to the cross-track error, or CTE. CTE is essentially how far from the middle line of the road the car is. This makes sense, as if the car is to the left of the line then you would want to steer to the right; if it is far to the left of the middle with a high CTE then you want a higher steering angle. However, if the coefficient is set too high for P, the car will oscillate a ton, as the car will constantly overcorrect and overshoot the middle. If the coefficient is too low, the car may react too slowly to curves when the car gets off-center with a higher CTE.
    The "I" for integral sums up all CTEs up to that point, such that too many negative CTEs (in this case, meaning the car has been to the left of the middle of the lane for awhile) will drive up this value, causing the car to turn back toward the middle, preventing the car from driving on one side of the lane the whole time. If the coefficient is too high for I, the car tends to have quicker oscillations, and does not tend to get up to a quick speed. A low coefficent for I will cause the car to tend to drift to one side of the lane or the other for longer periods of time.
    The "D" for derivate is the change in CTE from one value to the next. This means that 1) if the derivative is quickly changing, the car will correct itself (i.e. higher steering angle) faster, such as in the case of a curve, and 2) if the car is moving outward from the middle, this will cause the steering to get larger (as the derivative sign will match the proportional sign), but if the car is moving toward the center (meaning the derivative value will be negative), the car's steering angle will get smoothed out, leadingm to a more smoother driving experience. Too high of a coefficient leads to almost constant steering angle changes of large degrees, where although the car will be well-centered it can hardly move. Too low of a D coefficient will lead to the oscillations being too high with more overshooting.

These behaved fairly in line with what I was expecting.
Finding the right coefficients


Although it is removed from the final code, I had used Twiddle a little bit to try out different parameters, but found the values found in the original project lessons to be sufficient under my current implementation. I had also used an approach with SGD (stochastic gradient descent) before, but that did not seem to perform as well as Twiddle. I ended up deciding against Twiddle as the results tended to vary greatly - one build of my PID Controller, in a test of 10 runs around the track, made it around six times, half of which were very slow, with the others (using a throttle fully based on steering angle instead of the measured approach I use now with a percentage of steering + a set value) managing to race around the track in excess of 70 mph. Unfortunately, there were also four runs ending with crashes, two of which even happened before the first curve. Part of this was due to noise/variance in the simulator itself, from the looks of it.

In the end, the final values were determined by manual tuning. The ratio of the coefficients to each other that I chose (0.2, 0.004, 3.0) seemed to work well, and I also tried lowering & raising them in conjunction with each other as well as tuning each individually. I typically found that I was creating too high of steering angles (causing crashes if the speed had gotten too high on a straight) by raising them in conjunction with each other, while lowering all of them together meant the car struggled on the larger curves, sometimes not turning enough and shooting off the track.


BEST SO FAR: 16.1428:1.58774:0:10.7166


0.518779:0.0004:5.01013
Connected!!!

:0.518779,0.0004,5.63056
0.518779,0.0004,5.63056
BEST SO FAR: 3666.33:0.468779:0.0104:5.76917

./pid 0.1172 0.0026 1.4423

/pid 0.1172 0.00013 1.4423


--

*Student describes the effect of the P, I, D component of the PID algorithm in their implementation. Is it what you expected?*

Here we have implemented a classic PID controller. The PID controller has the job of producing an output value.



The P for propotional component s